See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 3 warnings)

Correctness:  20/28 tests passed
Memory:       No tests available for autograding.
Timing:       No tests available for autograding.

Aggregate score: 74.29%
[ Compilation: 5%, API: 5%, Style: 0%, Correctness: 90% ]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
1.4K Feb  1 07:43 Birthday.java
 903 Feb  1 07:43 DiscreteDistribution.java
1.9K Feb  1 07:43 Minesweeper.java
 976 Feb  1 07:43 ThueMorse.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac DiscreteDistribution.java
*-----------------------------------------------------------

% javac ThueMorse.java
*-----------------------------------------------------------

% javac Birthday.java
*-----------------------------------------------------------

% javac Minesweeper.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
DiscreteDistribution:

ThueMorse:

Birthday:

Minesweeper:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] DiscreteDistribution.java:12:15: The local variable 'sum_arr' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Minesweeper.java:33:25: Using a quadruple nested loop suggests poor design in this program. [NestedForDepth]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for DiscreteDistribution.java
*-----------------------------------------------------------

% custom checkstyle checks for ThueMorse.java
*-----------------------------------------------------------

% custom checkstyle checks for Birthday.java
*-----------------------------------------------------------
[WARN] Birthday.java:14:42: The numeric literal '10' appears to be unnecessary. [NumericLiteral]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for Minesweeper.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of DiscreteDistribution
*-----------------------------------------------------------
Running 6 total tests.

Test 1: check output format
  % java DiscreteDistribution 9 1 1 1 1 1 1
  4 5 6 4 5 6 2 3 4 5 6 2 3 4 5 6 4 5 6 6 4 5 6 5 6 3 4 5 6 

  % java DiscreteDistribution 8 10 20 30 40 50 60 50 40 30 20 10
  8 9 10 11 6 7 8 9 10 11 4 5 6 7 8 9 10 11 8 9 10 11 5 6 7 8 9 10 11 4 5 6 7 8 9 10 11 10 11 2 3 4 5 ...

  % java DiscreteDistribution 7 10 10 10 10 10 50
  6 6 6 6 2 3 4 5 6 3 4 5 6 3 4 5 6 

  % java DiscreteDistribution 6 50 50
  2 2 1 2 2 2 2 

  % java DiscreteDistribution 5 80 20
  1 2 2 1 2 1 2 1 2 

  % java DiscreteDistribution 4 301 176 125 97 79 67 58 51 46
  6 7 8 9 5 6 7 8 9 1 2 3 4 5 6 7 8 9 3 4 5 6 7 8 9 

  % java DiscreteDistribution 3 19 49 60 47 32 18 3 3 1
  1 2 3 4 5 6 7 8 9 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 

  % java DiscreteDistribution 2 9316001 10274874 10109130 10045436 9850199 6704495 5886889
  1 2 3 4 5 6 7 6 7 

  % java DiscreteDistribution 1 8167 1492 2782 4253 12702 2228 2015 6094 6966 153 772     ...
  15 16 17 18 19 20 21 22 23 24 25 26 

==> passed

Test 2: check that output contains correct number of integers
  * fair die                           [ repeated 1000 times ]
    - command-line arguments = "1000 1 1 1 1 1 1"
    - the result should be a sequence of 1000 integers between 1 and 6
    - number of integers output = 3556

  * sum of two dice                    [ repeated 1000 times ]
    - command-line arguments = "1000 10 20 30 40 50 60 50 40 30 20 10"
    - the result should be a sequence of 1000 integers between 1 and 11
    - number of integers output = 6011

  * loaded die                         [ repeated 1000 times ]
    - command-line arguments = "1000 10 10 10 10 10 50"
    - the result should be a sequence of 1000 integers between 1 and 6
    - number of integers output = 2548

  * fair coin                          [ repeated 1000 times ]
    - command-line arguments = "1000 50 50"
    - the result should be a sequence of 1000 integers between 1 and 2
    - number of integers output = 1489

  * 80/20 biased coin                  [ repeated 1000 times ]
    - command-line arguments = "1000 80 20"
    - the result should be a sequence of 1000 integers between 1 and 2
    - number of integers output = 1796

  * 9 digits in Benford's law          [ repeated 1000 times ]
    - command-line arguments = "1000 301 176 125 97 79 67 58 51 46"
    - the result should be a sequence of 1000 integers between 1 and 9
    - number of integers output = 6500

  * goals in FIFA World Cup 1990-2002  [ repeated 1000 times ]
    - command-line arguments = "1000 19 49 60 47 32 18 3 3 1"
    - the result should be a sequence of 1000 integers between 1 and 9
    - number of integers output = 6525

  * U.S. birthdays by day of week      [ repeated 1000 times ]
    - command-line arguments = "1000 9316001 10274874 10109130 10045436 9850199 6704495     ..."
    - the result should be a sequence of 1000 integers between 1 and 7
    - number of integers output = 4286

  * 26 letters in English language     [ repeated 1000 times ]
    - command-line arguments = "1000 8167 1492 2782 4253 12702 2228 2015 6094 6966 153 772  ..."
    - the result should be a sequence of 1000 integers between 1 and 26
    - number of integers output = 15254

==> FAILED

Test 3: check that output is a sequence of integers between 1 and n
  * fair die                           [ repeated 1000 times ]
  * sum of two dice                    [ repeated 1000 times ]
  * loaded die                         [ repeated 1000 times ]
  * fair coin                          [ repeated 1000 times ]
  * 80/20 biased coin                  [ repeated 1000 times ]
  * 9 digits in Benford's law          [ repeated 1000 times ]
  * goals in FIFA World Cup 1990-2002  [ repeated 1000 times ]
  * U.S. birthdays by day of week      [ repeated 1000 times ]
  * 26 letters in English language     [ repeated 1000 times ]
==> passed

Test 4: check that program produces different results when run twice
  * fair die                           [ repeated 10 times ]
  * sum of two dice                    [ repeated 12 times ]
  * loaded die                         [ repeated 10 times ]
  * fair coin                          [ repeated 20 times ]
  * 80/20 biased coin                  [ repeated 30 times ]
  * 9 digits in Benford's law          [ repeated 10 times ]
  * goals in FIFA World Cup 1990-2002  [ repeated 10 times ]
  * U.S. birthdays by day of week      [ repeated 14 times ]
  * 26 letters in English language     [ repeated 10 times ]
==> passed

Test 5: check randomness
  * fair die                           [ repeated 100000 times ]
    - command-line arguments = "100000 1 1 1 1 1 1"

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                1     16441   16666.7       -448.26
                2     33010   16666.7      45118.06
                3     49988   16666.7     109810.87
                4     66672   16666.7     184864.70
                5     83142   16666.7     267241.55
                6    100000   16666.7     358351.89
        -------------------------------------------
                     349253  100000.0     964938.80
    
    G-statistic = 964938.80 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * sum of two dice                    [ repeated 100000 times ]
    - command-line arguments = "100000 10 20 30 40 50 60 50 40 30 20 10"

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                1      2782    2777.8          8.45
                2      8361    5555.6       6835.61
                3     16698    8333.3      23211.07
                4     27878   11111.1      51289.51
                5     41771   13888.9      91989.20
                6     58314   16666.7     146068.58
                7     72424   13888.9     239209.02
                8     83484   11111.1     336725.93
                9     91690    8333.3     439772.71
               10     97243    5555.6     556699.56
               11    100000    2777.8     716703.79
        -------------------------------------------
                     600645  100000.0    2608513.43
    
    G-statistic = 2608513.43 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * loaded die                         [ repeated 100000 times ]
    - command-line arguments = "100000 10 10 10 10 10 50"

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                1     10028   10000.0         56.08
                2     20041   10000.0      27864.81
                3     30062   10000.0      66177.09
                4     39919   10000.0     110517.13
                5     49956   10000.0     160714.20
                6    100000   50000.0     138629.44
        -------------------------------------------
                     250006  100000.0     503958.75
    
    G-statistic = 503958.75 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * fair coin                          [ repeated 100000 times ]
    - command-line arguments = "100000 50 50"

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                1     50098   50000.0        196.19
                2    100000   50000.0     138629.44
        -------------------------------------------
                     150098  100000.0     138825.63
    
    G-statistic = 138825.63 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * 80/20 biased coin                  [ repeated 100000 times ]
    - command-line arguments = "100000 80 20"

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                1     80192   80000.0        384.46
                2    100000   20000.0     321887.58
        -------------------------------------------
                     180192  100000.0     322272.04
    
    G-statistic = 322272.04 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * 9 digits in Benford's law          [ repeated 100000 times ]
    - command-line arguments = "100000 301 176 125 97 79 67 58 51 46"

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                1     30221   30100.0        242.49
                2     47621   17600.0      94801.50
                3     60015   12500.0     188310.97
                4     69829    9700.0     275674.21
                5     77641    7900.0     354855.53
                6     84468    6700.0     428128.63
                7     90356    5800.0     496216.99
                8     95367    5100.0     558563.01
                9    100000    4600.0     615822.78
        -------------------------------------------
                     655518  100000.0    3012616.11
    
    G-statistic = 3012616.11 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * 26 letters in English language     [ repeated 100000 times ]
    - command-line arguments = "100000 8167 1492 2782 4253 12702 2228 2015 6094 6966 153    ..."

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                1      8063    8167.1       -206.83
                2      9534    1492.0      35366.12
                3     12418    2782.0      37153.83
                4     16683    4253.0      45603.17
                5     29334   12702.1      49103.81
                6     31562    2228.0     167331.60
                7     33562    2015.0     188804.06
                8     39596    6094.1     148200.97
                9     46428    6966.1     176134.05
               10     46551     153.0     532343.81
               11     47319     772.0     389499.03
               12     51360    4025.0     261558.48
               13     53776    2406.0     334148.11
               14     60673    6749.1     266487.28
               15     68258    7507.1     301352.07
               16     70141    1929.0     504102.77
               17     70231      95.0     927843.96
               18     76193    5987.1     387619.57
               19     82354    6327.1     422672.16
               20     91655    9056.1     424288.23
               21     94331    2758.0     666409.67
               22     95307     978.0     872886.10
               23     97763    2360.0     728114.30
               24     97897     150.0    1268945.98
               25     99912    1974.0     784152.91
               26    100000      74.0    1441770.07
        -------------------------------------------
                    1530901  100000.0   11361685.27
    
    G-statistic = 11361685.27 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * goals in FIFA World Cup 1990-2002  [ repeated 100000 times ]
    - command-line arguments = "100000 19 49 60 47 32 18 3 3 1"

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                1      8165    8189.7        -49.24
                2     29471   21120.7      19636.74
                3     55088   25862.1      83310.08
                4     75368   20258.6     198037.31
                5     89024   13793.1     332012.74
                6     96955    7758.6     489708.53
                7     98246    1293.1     850894.74
                8     99596    1293.1     865305.37
                9    100000     431.0    1089347.47
        -------------------------------------------
                     651913  100000.0    3928203.76
    
    G-statistic = 3928203.76 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * U.S. birthdays by day of week      [ repeated 100000 times ]
    - command-line arguments = "100000 9316001 10274874 10109130 10045436 9850199 6704495   ..."

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                1     15031   14980.6        100.93
                2     31638   16522.5      41106.22
                3     47889   16256.0     103480.76
                4     63892   16153.6     175709.64
                5     79518   15839.6     256599.49
                6     90278   10781.2     383698.07
                7    100000    9466.4     471483.74
        -------------------------------------------
                     428246  100000.0    1432178.83
    
    G-statistic = 1432178.83 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

==> FAILED

Test 6: check randomness when n = 1
  * a_1 = 1                            [ repeated 100000 times ]
  * a_1 = 100                          [ repeated 100000 times ]
==> passed


DiscreteDistribution Total: 4/6 tests passed!


================================================================
Testing correctness of ThueMorse
*-----------------------------------------------------------
Running 5 total tests.

Test 1: check output format
  % java ThueMorse 2
  +  -  
  -  +  

  % java ThueMorse 4
  +  -  -  +  
  -  +  +  -  
  -  +  +  -  
  +  -  -  +  

  % java ThueMorse 8
  +  -  -  +  -  +  +  -  
  -  +  +  -  +  -  -  +  
  -  +  +  -  +  -  -  +  
  +  -  -  +  -  +  +  -  
  -  +  +  -  +  -  -  +  
  +  -  -  +  -  +  +  -  
  +  -  -  +  -  +  +  -  
  -  +  +  -  +  -  -  +  

  % java ThueMorse 16
  +  -  -  +  -  +  +  -  -  +  +  -  +  -  -  +  
  -  +  +  -  +  -  -  +  +  -  -  +  -  +  +  -  
  -  +  +  -  +  -  -  +  +  -  -  +  -  +  +  -  
  +  -  -  +  -  +  +  -  -  +  +  -  +  -  -  +  
  -  +  +  -  +  -  -  +  +  -  -  +  -  +  +  -  
  +  -  -  +  -  +  +  -  -  +  +  -  +  -  -  +  
  +  -  -  +  -  +  +  -  -  +  +  -  +  -  -  +  
  -  +  +  -  +  -  -  +  +  -  -  +  -  +  +  -  
  -  +  +  -  +  -  -  +  +  -  -  +  -  +  +  -  
  +  -  -  +  -  +  +  -  -  +  +  -  +  -  -  +  
  +  -  -  +  -  +  +  -  -  +  +  -  +  -  -  +  
  -  +  +  -  +  -  -  +  +  -  -  +  -  +  +  -  
  +  -  -  +  -  +  +  -  -  +  +  -  +  -  -  +  
  -  +  +  -  +  -  -  +  +  -  -  +  -  +  +  -  
  -  +  +  -  +  -  -  +  +  -  -  +  -  +  +  -  
  +  -  -  +  -  +  +  -  -  +  +  -  +  -  -  +  

==> passed

Test 2: check correctness when n is a power of 2
  * java ThueMorse 2
  * java ThueMorse 4
  * java ThueMorse 8
  * java ThueMorse 16
  * java ThueMorse 32
  * java ThueMorse 64
==> passed

Test 3: check correctness when n is not a power of 2
  * java ThueMorse 3
  * java ThueMorse 5
  * java ThueMorse 6
  * java ThueMorse 7
  * java ThueMorse 9
  * java ThueMorse 10
  * java ThueMorse 11
  * java ThueMorse 12
  * java ThueMorse 13
  * java ThueMorse 14
  * java ThueMorse 15
==> passed

Test 4: check corner case
  * java ThueMorse 1
==> passed

Test 5: check random values of n
  * 100 random values of n in [16, 32)
  * 100 random values of n in [32, 64)
  * 50 random values of n in [64, 128)
  * 25 random values of n in [128, 256)
==> passed


ThueMorse Total: 5/5 tests passed!


================================================================
Testing correctness of Birthday
*-----------------------------------------------------------
Running 6 total tests.

Test 1: check output format
  % java Birthday 365 100000
  1	0	0.0
  2	247	0.00247
  3	557	0.00804
  4	827	0.01631
  5	1070	0.02701
  6	1361	0.04062
  7	1529	0.05591
  8	1794	0.07385
  9	2045	0.0943
  10	2224	0.11654
  11	2350	0.14004
  12	2563	0.16567
  13	2732	0.19299
  14	2854	0.22153
  15	2965	0.25118
  16	3044	0.28162
  17	3060	0.31222
  18	3231	0.34453
  19	3245	0.37698
  20	3172	0.4087
  21	3206	0.44076
  22	3121	0.47197
  23	3221	0.50418

  % java Birthday 31 100000
  1	0	0.0
  2	3196	0.03196
  3	6232	0.09428
  4	8851	0.18279
  5	10709	0.28988
  6	11450	0.40438
  7	11538	0.51976

==> passed

Test 2: check values in first column
  * java Birthday 365 10000
  * java Birthday 31 10000
  * java Birthday 1 1000

    java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1

    Birthday.main(Birthday.java:23)
    UtilCOS.execute(UtilCOS.java:89)
    UtilCOS.execute(UtilCOS.java:76)
    TestBirthday.getStudentOutput(TestBirthday.java:52)
    TestBirthday.checkValues(TestBirthday.java:64)
    TestBirthday.test2(TestBirthday.java:408)
    TestBirthday.main(TestBirthday.java:459)

  * java Birthday 2 1000

    java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2

    Birthday.main(Birthday.java:23)
    UtilCOS.execute(UtilCOS.java:89)
    UtilCOS.execute(UtilCOS.java:76)
    TestBirthday.getStudentOutput(TestBirthday.java:52)
    TestBirthday.checkValues(TestBirthday.java:64)
    TestBirthday.test2(TestBirthday.java:409)
    TestBirthday.main(TestBirthday.java:459)

==> FAILED

Test 3: check that cumulative percentages are monotone nondecreasing
        and table stops when percentage reaches (or exceeds) 50%
  * java Birthday 365 10000 [ repeated 10 times ]
  * java Birthday 31 10000 [ repeated 10 times ]
  * java Birthday 10 5 [ repeated 1000 times ]

    java.lang.ArrayIndexOutOfBoundsException: Index 10 out of bounds for length 10

    Birthday.main(Birthday.java:23)
    UtilCOS.execute(UtilCOS.java:89)
    UtilCOS.execute(UtilCOS.java:76)
    TestBirthday.getStudentOutput(TestBirthday.java:52)
    TestBirthday.isCorrectCumulativePercentages(TestBirthday.java:178)
    TestBirthday.checkCumulativePercentages(TestBirthday.java:167)
    TestBirthday.test3(TestBirthday.java:420)
    TestBirthday.main(TestBirthday.java:460)

    - failed on trial 94 of 1000

  * java Birthday 4 4 [ repeated 1000 times ]

    java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length 4

    Birthday.main(Birthday.java:23)
    UtilCOS.execute(UtilCOS.java:89)
    UtilCOS.execute(UtilCOS.java:76)
    TestBirthday.getStudentOutput(TestBirthday.java:52)
    TestBirthday.isCorrectCumulativePercentages(TestBirthday.java:178)
    TestBirthday.checkCumulativePercentages(TestBirthday.java:167)
    TestBirthday.test3(TestBirthday.java:421)
    TestBirthday.main(TestBirthday.java:460)

    - failed on trial 1 of 1000

  * java Birthday 2 2 [ repeated 1000 times ]

    java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2

    Birthday.main(Birthday.java:23)
    UtilCOS.execute(UtilCOS.java:89)
    UtilCOS.execute(UtilCOS.java:76)
    TestBirthday.getStudentOutput(TestBirthday.java:52)
    TestBirthday.isCorrectCumulativePercentages(TestBirthday.java:178)
    TestBirthday.checkCumulativePercentages(TestBirthday.java:167)
    TestBirthday.test3(TestBirthday.java:422)
    TestBirthday.main(TestBirthday.java:460)

    - failed on trial 1 of 1000

==> FAILED

Test 4: check that cumulative percentages are consistent with frequencies
  * java Birthday 365 10000
  * java Birthday 31 10000
==> passed

Test 5: check that each execution of program outputs a different table
  * java Birthday 365 10000 [ repeated twice ]
  * java Birthday 31 10000 [ repeated twice ]
==> passed

Test 6: check randomness of birthdays
  * java Birthday 365 1000000
  * java Birthday 31 1000000
  * java Birthday 7 1000000

    java.lang.ArrayIndexOutOfBoundsException: Index 7 out of bounds for length 7

    Birthday.main(Birthday.java:23)
    UtilCOS.execute(UtilCOS.java:89)
    UtilCOS.execute(UtilCOS.java:76)
    TestBirthday.getStudentOutput(TestBirthday.java:52)
    TestBirthday.checkRandomness(TestBirthday.java:293)
    TestBirthday.test6(TestBirthday.java:447)
    TestBirthday.main(TestBirthday.java:463)

  * java Birthday 5 1000000

    java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 5

    Birthday.main(Birthday.java:23)
    UtilCOS.execute(UtilCOS.java:89)
    UtilCOS.execute(UtilCOS.java:76)
    TestBirthday.getStudentOutput(TestBirthday.java:52)
    TestBirthday.checkRandomness(TestBirthday.java:293)
    TestBirthday.test6(TestBirthday.java:448)
    TestBirthday.main(TestBirthday.java:463)

==> FAILED


Birthday Total: 3/6 tests passed!


================================================================
Testing correctness of Minesweeper
*-----------------------------------------------------------
Running 11 total tests.

Test 1: check output format
  % java Minesweeper 9 9 10
  0  0  0  0  0  0  0  0  0  
  0  0  0  0  0  0  0  0  0  
  *  1  0  0  *  1  *  1  0  
  1  1  0  0  1  1  1  1  *  
  0  0  0  *  1  0  0  0  1  
  0  0  0  1  1  0  0  0  0  
  *  1  *  1  0  0  0  0  0  
  1  1  1  1  0  0  *  1  *  
  0  0  0  0  0  *  2  1  1  

  % java Minesweeper 16 16 40
  0  *  1  0  0  0  0  0  0  0  0  0  0  0  0  0  
  0  *  2  0  0  0  0  0  *  1  0  0  0  0  0  0  
  0  1  1  0  0  0  0  0  1  1  0  *  1  0  *  1  
  0  0  0  *  1  *  1  0  0  0  0  1  1  0  1  *  
  0  0  0  1  *  2  1  *  1  *  1  0  0  0  *  2  
  0  0  0  0  1  1  0  1  1  1  1  0  0  0  1  1  
  0  *  1  0  0  0  0  0  0  0  0  0  *  *  1  0  
  *  2  1  0  0  0  0  0  0  0  0  *  2  2  1  0  
  1  1  0  0  0  0  0  0  0  0  0  1  1  0  0  0  
  0  0  0  *  1  0  0  0  0  0  0  0  0  0  0  0  
  0  *  *  *  2  0  0  0  0  0  0  0  0  *  1  0  
  0  1  2  2  1  0  *  1  0  *  1  0  *  2  *  1  
  0  0  0  0  0  *  2  1  0  1  1  0  1  1  *  2  
  0  0  *  1  0  *  2  *  1  0  0  0  0  0  1  1  
  *  *  *  2  0  1  1  *  2  0  *  1  0  0  0  0  
  1  2  2  1  *  *  *  2  1  0  1  1  *  1  0  0  

  % java Minesweeper 16 30 82
  0  0  *  1  *  *  1  0  0  0  0  0  0  0  *  *  1  0  *  1  0  0  0  0  0  0  0  0  0  0  
  0  0  1  1  1  *  2  0  0  0  0  0  0  *  *  3  *  1  *  *  1  0  0  0  0  0  0  0  0  0  
  0  0  0  0  0  *  2  *  1  0  0  0  0  1  2  1  1  1  *  3  1  0  0  0  0  0  0  0  *  1  
  *  *  1  *  1  1  1  1  *  1  *  1  0  0  *  1  0  *  *  2  0  *  1  0  0  0  0  0  1  *  
  1  2  1  1  1  0  0  0  1  1  1  1  0  0  1  1  0  1  *  2  0  1  *  1  *  1  0  0  0  1  
  *  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  1  0  0  1  *  2  *  1  0  *  1  
  1  1  0  0  0  *  1  0  0  0  0  0  0  0  0  0  0  0  *  *  *  1  0  1  1  1  1  0  1  *  
  0  0  0  0  0  1  1  0  0  0  0  0  0  *  1  0  0  0  1  2  2  1  0  0  0  0  0  0  0  1  
  0  0  0  0  0  0  0  0  *  *  1  *  *  2  1  0  *  1  *  1  0  0  0  0  0  0  0  0  0  0  
  0  0  0  0  0  0  0  0  1  2  1  *  3  1  0  0  1  1  1  *  1  *  1  *  1  0  *  1  0  0  
  0  *  1  0  0  0  0  0  0  0  0  1  *  1  0  0  0  *  1  1  1  1  1  1  1  *  2  *  *  1  
  0  *  2  0  0  *  1  0  0  0  0  0  1  1  0  0  0  1  *  1  *  *  1  0  *  2  1  1  2  1  
  0  1  1  *  1  1  1  0  0  0  0  0  0  *  1  0  0  0  1  1  1  2  1  0  1  1  0  0  0  0  
  0  0  *  2  1  0  *  1  *  1  *  1  *  2  1  0  0  0  *  1  0  *  1  0  0  *  1  0  0  0  
  0  0  1  1  0  0  1  1  1  1  *  2  1  *  *  *  1  0  1  1  0  1  1  0  0  1  1  0  0  0  
  *  1  0  0  0  0  0  *  *  1  1  1  0  1  *  *  2  *  1  0  0  0  0  0  0  0  0  0  0  0  

  % java Minesweeper 4 8 0
  0  0  0  0  0  0  0  0  
  0  0  0  0  0  0  0  0  
  0  0  0  0  0  0  0  0  
  0  0  0  0  0  0  0  0  

  % java Minesweeper 8 4 32
  *  *  *  *  
  *  *  *  *  
  *  *  *  *  
  *  *  *  *  
  *  *  *  *  
  *  *  *  *  
  *  *  *  *  
  *  *  *  *  

  % java Minesweeper 1 20 10
  *  *  *  1  0  *  1  *  *  *  *  1  0  *  1  *  1  0  0  0  

==> passed

Test 2: check that counts are consistent with mines (varying k)
  * m =  4, n =  8, k random [1000 trials]
    - wrong count in row 0 and column 0
    - student   count = 0
    - reference count = 1
    - student output:
      0  *  *  1  *  *  1  0  
      0  1  2  1  1  *  2  *  
      *  1  *  1  0  *  2  1  
      *  2  *  2  0  1  *  1  

    - m = 4, n = 8, k = 12
    - failed on trial 1 of 1000

  * m =  8, n =  4, k random [1000 trials]
    - wrong count in row 0 and column 0
    - student   count = 0
    - reference count = 1
    - student output:
      0  *  1  0  
      0  1  *  1  
      *  1  *  2  
      1  *  2  1  
      0  1  1  *  
      0  0  0  1  
      *  1  0  *  
      1  *  *  2  

    - m = 8, n = 4, k = 10
    - failed on trial 1 of 1000

  * m =  5, n = 40, k random [1000 trials]
    - wrong count in row 0 and column 2
    - student   count = 1
    - reference count = 4
    - student output:
      *  *  1  *  *  1  *  *  *  1  0  0  0  0  0  *  1  *  1  0  0  *  1  0  *  1  * ...
      *  *  2  *  *  2  *  3  2  1  0  *  *  1  0  1  1  1  *  *  *  2  1  0  1  *  * ...
      *  3  1  1  2  *  *  *  *  *  1  1  2  *  *  *  *  1  *  3  2  *  1  0  *  *  * ...
      1  *  *  *  1  1  2  2  2  *  *  *  *  2  2  *  3  *  *  *  *  *  2  *  *  *  * ...
      *  2  *  3  1  0  *  *  *  *  3  *  *  *  *  *  2  *  *  3  *  3  1  1  2  2  * ...

    - m = 5, n = 40, k = 105
    - failed on trial 1 of 1000

  * m =  7, n = 30, k random [1000 trials]
    - wrong count in row 0 and column 2
    - student   count = 1
    - reference count = 5
    - student output:
      *  *  1  *  *  *  *  *  *  *  *  1  *  1  *  *  *  *  *  1  *  1  *  1  *  *  * ...
      1  *  *  *  *  3  2  *  3  2  *  *  *  *  *  *  3  2  2  1  *  *  2  *  *  3  * ...
      *  *  3  *  *  2  0  *  *  *  *  *  3  2  *  3  1  *  *  *  2  *  2  *  *  *  2 ...
      1  2  1  *  3  *  *  2  *  3  *  *  *  *  *  *  1  1  2  *  *  *  *  *  *  *  * ...
      0  *  *  2  1  1  *  *  2  1  *  *  3  *  *  *  *  1  0  1  *  *  *  3  *  *  3 ...
      0  1  2  1  *  1  *  3  *  1  1  *  *  *  3  *  *  *  1  *  *  *  *  2  1  *  * ...
      0  0  0  0  *  2  1  1  *  *  *  *  *  *  *  2  2  *  *  *  3  2  2  *  1  1  * ...

    - m = 7, n = 30, k = 127
    - failed on trial 1 of 1000

  * m = 10, n = 10, k random [1000 trials]
    - wrong count in row 0 and column 0
    - student   count = 0
    - reference count = 2
    - student output:
      0  0  0  *  1  *  *  *  1  *  
      *  *  *  *  2  1  2  *  2  *  
      *  3  *  *  2  *  1  1  1  1  
      1  1  *  *  2  *  2  0  *  *  
      *  *  *  3  1  1  1  *  2  2  
      *  3  2  *  1  0  0  *  2  0  
      *  2  0  1  *  1  0  1  *  1  
      *  *  *  *  2  *  *  1  *  2  
      1  *  3  2  1  1  *  2  *  *  
      *  *  *  *  *  1  1  1  1  *  

    - m = 10, n = 10, k = 47
    - failed on trial 1 of 1000

==> FAILED

Test 3: check that counts are consistent with mines (fixed k)
  * k =  1, m and n random   [1000 trials]
    - wrong count in row 9 and column 8
    - student   count = 0
    - reference count = 1
    - student output:
      0  0  0  0  0  0  0  0  0  0  0  0  0  
      0  0  0  0  0  0  0  0  0  0  0  0  0  
      0  0  0  0  0  0  0  0  0  0  0  0  0  
      0  0  0  0  0  0  0  0  0  0  0  0  0  
      0  0  0  0  0  0  0  0  0  0  0  0  0  
      0  0  0  0  0  0  0  0  0  0  0  0  0  
      0  0  0  0  0  0  0  0  0  0  0  0  0  
      0  0  0  0  0  0  0  0  0  0  0  0  0  
      0  0  0  0  0  0  0  0  0  0  0  0  0  
      0  0  0  0  0  0  0  0  0  0  0  0  0  
      0  0  0  0  0  0  0  0  0  *  1  0  0  
      0  0  0  0  0  0  0  0  0  1  1  0  0  
      0  0  0  0  0  0  0  0  0  0  0  0  0  
      0  0  0  0  0  0  0  0  0  0  0  0  0  
      0  0  0  0  0  0  0  0  0  0  0  0  0  
      0  0  0  0  0  0  0  0  0  0  0  0  0  

    - m = 16, n = 13, k = 1
    - failed on trial 1 of 1000

  * k = 10, m and n random   [1000 trials]
    - wrong count in row 0 and column 2
    - student   count = 0
    - reference count = 1
    - student output:
      *  1  0  *  1  0  0  *  1  *  1  0  *  1  
      1  1  0  1  1  0  *  *  *  2  1  *  2  *  

    - m = 2, n = 14, k = 10
    - failed on trial 1 of 1000

  * k = 20, m and n random   [1000 trials]
    - wrong count in row 0 and column 1
    - student   count = 0
    - reference count = 1
    - student output:
      0  0  *  1  0  *  1  *  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  
      0  0  1  1  0  1  1  1  1  0  *  1  0  0  0  0  0  0  0  0  0  *  1  0  0  
      0  0  0  0  0  0  0  0  0  0  1  1  0  0  0  0  0  0  0  0  0  1  1  0  0  
      0  0  0  0  0  0  0  0  0  0  *  1  0  0  0  0  0  0  0  0  *  1  0  0  0  
      0  0  *  1  0  0  0  0  0  0  1  1  *  1  0  0  0  0  0  0  1  1  0  0  0  
      0  0  *  2  0  0  0  0  0  0  0  0  1  *  1  0  0  0  0  0  0  *  1  0  0  
      0  0  1  1  0  *  1  0  0  *  1  0  0  *  2  *  1  0  *  1  *  2  1  0  0  
      0  0  0  0  0  1  1  0  0  1  1  0  0  *  2  1  *  1  1  1  1  1  0  0  0  

    - m = 8, n = 25, k = 20
    - failed on trial 1 of 1000

  * k = 50, m and n random   [1000 trials]
    - wrong count in row 0 and column 5
    - student   count = 0
    - reference count = 2
    - student output:
      0  0  0  0  0  0  *  1  0  0  0  0  0  0  *  1  *  1  0  0  
      0  0  0  0  0  0  *  2  0  0  0  0  0  0  1  1  1  1  0  0  
      0  0  0  0  0  *  2  1  0  0  0  0  0  *  1  *  1  0  *  1  
      *  1  0  0  0  *  2  0  0  0  *  1  0  *  2  1  1  0  1  *  
      1  1  0  0  0  1  1  0  0  0  1  1  0  1  1  0  0  0  0  1  
      0  *  1  0  *  1  0  0  0  0  0  0  0  0  0  0  *  *  1  0  
      0  1  1  0  1  1  0  0  0  0  0  0  0  0  0  0  1  2  1  0  
      0  0  0  0  0  *  1  0  0  0  *  1  0  0  0  0  0  0  0  0  
      0  0  0  0  0  1  1  0  0  0  1  1  0  0  0  0  0  0  *  1  
      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  *  2  
      0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  *  2  
      0  0  *  1  *  1  0  0  0  0  0  0  0  0  *  1  0  0  1  1  
      0  *  2  1  1  1  0  0  0  0  0  0  0  0  1  1  0  0  *  1  
      0  1  1  0  0  *  *  1  *  1  0  *  1  0  0  0  0  0  1  1  
      0  0  0  0  0  1  *  2  1  1  0  *  2  *  1  *  *  1  *  1  
      0  0  0  0  0  0  1  1  0  0  0  1  1  1  *  2  2  1  1  1  
      0  0  0  0  0  0  0  0  0  0  0  0  0  *  2  1  *  1  0  0  
      0  0  0  0  0  0  0  0  0  0  *  1  *  *  2  0  *  2  *  1  
      0  0  0  0  0  0  0  0  *  1  1  1  1  2  1  0  1  *  2  1  
      0  0  0  0  0  0  0  0  1  1  0  0  0  0  0  0  0  1  1  0  
      0  0  0  0  0  0  0  0  0  0  0  0  0  0  *  1  0  0  0  0  
      0  0  0  0  0  0  0  0  0  *  1  0  *  1  1  1  0  0  0  0  

    - m = 22, n = 20, k = 50
    - failed on trial 1 of 1000

  * k = 80, m and n random   [1000 trials]
    - wrong count in row 0 and column 1
    - student   count = 1
    - reference count = 2
    - student output:
      *  1  0  0  *  1  0  0  0  0  0  *  1  0  *  1  0  0  0  0  0  *  
      1  1  *  *  2  1  0  0  0  0  0  *  *  1  1  1  0  0  0  0  *  2  
      *  1  1  *  2  0  0  0  0  *  1  *  3  1  0  0  0  *  *  *  2  *  
      1  1  0  1  1  0  0  *  1  *  2  1  1  *  1  0  0  *  3  2  1  *  
      0  0  0  *  *  1  0  1  1  1  *  *  *  *  2  0  0  1  1  0  *  *  
      *  1  0  1  2  1  0  0  0  0  1  2  *  *  2  0  0  *  1  0  1  2  
      1  1  0  *  1  0  0  0  0  *  1  0  *  *  *  1  0  1  *  1  0  0  
      0  0  *  2  1  0  0  0  0  1  *  1  *  3  2  1  0  0  1  *  1  0  
      0  0  1  1  0  *  *  *  1  *  2  1  *  *  1  *  *  *  1  1  1  0  
      0  *  1  0  0  1  2  2  1  1  *  1  1  *  2  1  2  *  2  0  0  0  
      *  2  *  1  *  1  0  0  0  *  2  1  0  1  1  0  *  2  *  1  0  *  
      *  2  *  2  *  2  0  0  0  1  1  0  0  0  *  1  1  1  1  1  0  *  
      1  1  1  1  1  1  *  1  0  0  0  0  *  *  2  *  1  0  0  0  0  1  
      0  *  1  0  0  *  2  1  *  1  0  0  1  2  1  1  1  *  *  1  *  1  

    - m = 14, n = 22, k = 80
    - failed on trial 1 of 1000

  * k = 90, m and n random   [1000 trials]
    - wrong count in row 2 and column 4
    - student   count = 3
    - reference count = 8
    - student output:
      *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  
      *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  
      *  *  *  *  3  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  
      *  *  *  *  *  *  *  *  *  *  *  *  *  3  *  *  *  *  *  *  *  *  *  

    - m = 4, n = 23, k = 90
    - failed on trial 1 of 1000

  * k = 99, m and n random   [1000 trials]
    - wrong count in row 0 and column 1
    - student   count = 1
    - reference count = 4
    - student output:
      *  1  *  *  *  *  *  *  
      1  *  *  *  3  2  *  *  
      *  2  2  *  2  0  1  2  
      *  *  1  1  1  0  *  1  
      1  2  *  *  *  *  *  2  
      *  1  1  2  *  3  2  *  
      *  2  0  *  2  *  1  *  
      1  *  1  1  *  *  2  *  
      *  *  2  0  1  2  *  *  
      1  2  *  1  *  *  2  *  
      0  *  *  2  *  3  1  *  
      *  *  3  1  1  *  *  2  
      1  2  1  *  1  1  2  *  
      *  1  0  1  1  0  0  1  
      1  1  0  0  0  0  0  0  
      0  *  1  0  0  0  0  0  
      *  *  *  1  *  1  *  *  
      *  3  *  2  *  2  *  3  
      1  *  *  *  2  *  2  *  
      0  1  *  *  *  2  1  1  
      0  *  2  2  2  *  *  *  
      0  1  1  *  1  1  *  *  
      0  0  *  *  2  *  2  *  
      *  1  1  2  *  *  *  2  
      1  *  *  1  *  3  *  *  
      0  1  *  2  1  1  *  3  
      *  1  1  *  1  0  1  1  
      *  2  *  2  1  *  1  *  

    - m = 28, n = 8, k = 99
    - failed on trial 1 of 1000

==> FAILED

Test 4: check that counts are consistent with mines (corner cases)
  * m =  5, n = 10, k =  0
  * m = 10, n =  5, k =  0
  * m =  5, n = 10, k = 50
  * m = 10, n =  5, k = 50
  * k =  0, m and n random   [1000 trials]
  * k =  1, m and n random   [1000 trials]
    - wrong count in row 8 and column 0
    - student   count = 0
    - reference count = 1
    - student output:
      0  0  
      0  0  
      0  0  
      0  0  
      0  0  
      0  0  
      0  0  
      0  0  
      0  0  
      0  *  

    - m = 10, n = 2, k = 1
    - failed on trial 1 of 1000

==> FAILED

Test 5: check that program produces different results each time
  * m =  4, n =  8, k = 16 [2 trials]
  * m =  8, n =  4, k = 26 [2 trials]
  * m =  1, n = 20, k = 16 [2 trials]
  * m = 20, n =  1, k = 10 [2 trials]
==> passed

Test 6: check number of mines, with k varying
  * m =  4, n =  8, k random [1000 trials]
  * m =  8, n =  4, k random [1000 trials]
  * m =  5, n = 40, k random [1000 trials]
  * m =  7, n = 30, k random [1000 trials]
  * m = 10, n = 10, k random [1000 trials]
==> passed

Test 7: check number of mines, with k fixed
  * k =  5, m and n random   [1000 trials]
  * k = 10, m and n random   [1000 trials]
  * k = 50, m and n random   [1000 trials]
  * k = 99, m and n random   [1000 trials]
==> passed

Test 8: check number of mines for corner cases
  * m =  5, n = 20, k =  0
  * m = 20, n =  5, k =  0
  * m =  5, n = 10, k = 50
  * m = 10, n =  5, k = 50
  * k =  0, m and n random   [1000 trials]
  * k =  1, m and n random   [1000 trials]
==> passed

Test 9: check that mines are uniformly random
  * m = 1, n = 2, k = 1 [repeated 15000 times]
  * m = 1, n = 3, k = 1 [repeated 15000 times]
  * m = 2, n = 2, k = 2 [repeated 15000 times]
  * m = 2, n = 4, k = 3 [repeated 15000 times]
  * m = 3, n = 3, k = 6 [repeated 15000 times]
==> passed

Test 10: check statistical independence of mines within an m-by-n grid
  * m = 500, n = 500, k = 125000
  * m = 500, n = 500, k = 25000
  * m = 500, n = 500, k = 225000
  * m = 100, n = 900, k = 27000
  * m = 900, n = 100, k = 63000
==> passed

Test 11: check statistical independence of mines between m-by-n grids
  * m = 1, n = 2, k = 1 [repeated 50000 times]
  * m = 1, n = 3, k = 1 [repeated 50000 times]
  * m = 2, n = 2, k = 2 [repeated 50000 times]
  * m = 2, n = 4, k = 3 [repeated 50000 times]
  * m = 3, n = 3, k = 8 [repeated 50000 times]
==> passed


Minesweeper Total: 8/11 tests passed!


================================================================
